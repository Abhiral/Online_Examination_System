@model EDMSModel.FormQuestionModel
@{
    ViewBag.Title = "Create";
    Layout = null;
}
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <span class="close" id="closeTop" data-dismiss="modal" aria-hidden="true">&times;</span>
            <h4 class="modal-title">Question Detail </h4>
        </div>
        @using (Html.BeginForm("EditFormQuestion", "FormQuestion", FormMethod.Post, new { id = "formQuestion-form" }))
        {
            <div class="modal-body">
                <div class="content-box">
                    @Html.ValidationSummary(true)
                    <div class="row">
                        @Html.HiddenFor(model => model.FormQuestionId)
                        @Html.HiddenFor(model=>model.FormCategoryId)
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Question)
                            @Html.TextAreaFor(model => model.Question, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.IsNull)
                            @Html.CheckBoxFor(model => model.IsNull, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.IsNull, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.InputName)
                            @Html.DropDownListFor(model => model.InputTypeId, ViewBag.InputTypeCollection as SelectList, "--Select--", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.InputName, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.DisplayOrder)
                            @Html.TextBoxFor(model => model.DisplayOrder, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="btn-groups modal-footer">
                    <button type="submit" class="btn btn-primary btn-save"><i class="fa fa-save"></i>Save Change</button>
            </div>
        }
    </div>
</div>
<script>
    $(function () {

        $('#FormQuestion-form').ajaxForm({
            beforeSubmit: function () {
                $('#FormQuestion-form').removeData("validator").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse($('#FormQuestion-form'));
                if ($("#FormQuestion-form").valid()) {

                } else {
                    return false;
                }
            },
            success: function (result) {
                debugger;
                if (result.Success) {
                    WorkForce.loader.hide();
                    ShowMessage("success", "success", result.Msg);
                    $('#pop-up-div').modal('hide');
                    location.href = '@Url.Content("~/FormQuestion/CreateEditFormQuestion?FormId="+Model.FormCategoryId)';
                } else {
                    WorkForce.loader.hide();
                    ShowMessage("error", "error");
                }
            },
            error: function () {
                debugger;
                WorkForce.loader.hide();
                ShowMessage("error", "error", "error in calling ajax!!");
            }

        });
    });
</script>

